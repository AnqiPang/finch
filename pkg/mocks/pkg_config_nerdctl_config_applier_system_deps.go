// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch/pkg/config (interfaces: NerdctlConfigApplierSystemDeps)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// NerdctlConfigApplierSystemDeps is a mock of NerdctlConfigApplierSystemDeps interface.
type NerdctlConfigApplierSystemDeps struct {
	ctrl     *gomock.Controller
	recorder *NerdctlConfigApplierSystemDepsMockRecorder
}

// NerdctlConfigApplierSystemDepsMockRecorder is the mock recorder for NerdctlConfigApplierSystemDeps.
type NerdctlConfigApplierSystemDepsMockRecorder struct {
	mock *NerdctlConfigApplierSystemDeps
}

// NewNerdctlConfigApplierSystemDeps creates a new mock instance.
func NewNerdctlConfigApplierSystemDeps(ctrl *gomock.Controller) *NerdctlConfigApplierSystemDeps {
	mock := &NerdctlConfigApplierSystemDeps{ctrl: ctrl}
	mock.recorder = &NerdctlConfigApplierSystemDepsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *NerdctlConfigApplierSystemDeps) EXPECT() *NerdctlConfigApplierSystemDepsMockRecorder {
	return m.recorder
}

// Env mocks base method.
func (m *NerdctlConfigApplierSystemDeps) Env(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Env", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Env indicates an expected call of Env.
func (mr *NerdctlConfigApplierSystemDepsMockRecorder) Env(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Env", reflect.TypeOf((*NerdctlConfigApplierSystemDeps)(nil).Env), arg0)
}

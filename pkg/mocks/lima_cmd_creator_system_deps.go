// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runfinch/finch/pkg/command (interfaces: LimaCmdCreatorSystemDeps)

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// LimaCmdCreatorSystemDeps is a mock of LimaCmdCreatorSystemDeps interface.
type LimaCmdCreatorSystemDeps struct {
	ctrl     *gomock.Controller
	recorder *LimaCmdCreatorSystemDepsMockRecorder
}

// LimaCmdCreatorSystemDepsMockRecorder is the mock recorder for LimaCmdCreatorSystemDeps.
type LimaCmdCreatorSystemDepsMockRecorder struct {
	mock *LimaCmdCreatorSystemDeps
}

// NewLimaCmdCreatorSystemDeps creates a new mock instance.
func NewLimaCmdCreatorSystemDeps(ctrl *gomock.Controller) *LimaCmdCreatorSystemDeps {
	mock := &LimaCmdCreatorSystemDeps{ctrl: ctrl}
	mock.recorder = &LimaCmdCreatorSystemDepsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *LimaCmdCreatorSystemDeps) EXPECT() *LimaCmdCreatorSystemDepsMockRecorder {
	return m.recorder
}

// Env mocks base method.
func (m *LimaCmdCreatorSystemDeps) Env(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Env", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Env indicates an expected call of Env.
func (mr *LimaCmdCreatorSystemDepsMockRecorder) Env(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Env", reflect.TypeOf((*LimaCmdCreatorSystemDeps)(nil).Env), arg0)
}

// Environ mocks base method.
func (m *LimaCmdCreatorSystemDeps) Environ() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environ")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Environ indicates an expected call of Environ.
func (mr *LimaCmdCreatorSystemDepsMockRecorder) Environ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environ", reflect.TypeOf((*LimaCmdCreatorSystemDeps)(nil).Environ))
}

// Stderr mocks base method.
func (m *LimaCmdCreatorSystemDeps) Stderr() *os.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stderr")
	ret0, _ := ret[0].(*os.File)
	return ret0
}

// Stderr indicates an expected call of Stderr.
func (mr *LimaCmdCreatorSystemDepsMockRecorder) Stderr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stderr", reflect.TypeOf((*LimaCmdCreatorSystemDeps)(nil).Stderr))
}

// Stdin mocks base method.
func (m *LimaCmdCreatorSystemDeps) Stdin() *os.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdin")
	ret0, _ := ret[0].(*os.File)
	return ret0
}

// Stdin indicates an expected call of Stdin.
func (mr *LimaCmdCreatorSystemDepsMockRecorder) Stdin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdin", reflect.TypeOf((*LimaCmdCreatorSystemDeps)(nil).Stdin))
}

// Stdout mocks base method.
func (m *LimaCmdCreatorSystemDeps) Stdout() *os.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdout")
	ret0, _ := ret[0].(*os.File)
	return ret0
}

// Stdout indicates an expected call of Stdout.
func (mr *LimaCmdCreatorSystemDepsMockRecorder) Stdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdout", reflect.TypeOf((*LimaCmdCreatorSystemDeps)(nil).Stdout))
}
